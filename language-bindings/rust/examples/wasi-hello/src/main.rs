/*
 * Copyright (C) 2023 Liquid Reply GmbH. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
 */

use wamr_sdk_rust::*;

const DEFAULT_HEAP_SIZE: u32 = 20971520;
const DEFAULT_STACK_SIZE: u32 = 163840;
const DEFAULT_ERROR_BUF_SIZE: usize = 128;

fn main() {

    // Copied from go sample (../go/samples/test.go)
    let payload = [
        0x00, 0x61, 0x73, 0x6D, 0x01, 0x00, 0x00, 0x00, 0x01, 0x29, 0x07, 0x60, 0x01, 0x7F, 0x01,
        0x7F, 0x60, 0x02, 0x7F, 0x7F, 0x01, 0x7F, 0x60, 0x01, 0x7F, 0x00, 0x60, 0x04, 0x7F, 0x7E,
        0x7D, 0x7C, 0x00, 0x60, 0x02, 0x7E, 0x7E, 0x01, 0x7E, 0x60, 0x02, 0x7C, 0x7F, 0x01, 0x7D,
        0x60, 0x02, 0x7D, 0x7C, 0x01, 0x7C, 0x02, 0x31, 0x04, 0x03, 0x65, 0x6E, 0x76, 0x06, 0x70,
        0x72, 0x69, 0x6E, 0x74, 0x66, 0x00, 0x01, 0x03, 0x65, 0x6E, 0x76, 0x04, 0x70, 0x75, 0x74,
        0x73, 0x00, 0x00, 0x03, 0x65, 0x6E, 0x76, 0x06, 0x6D, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x00,
        0x00, 0x03, 0x65, 0x6E, 0x76, 0x04, 0x66, 0x72, 0x65, 0x65, 0x00, 0x02, 0x03, 0x07, 0x06,
        0x00, 0x03, 0x04, 0x06, 0x05, 0x01, 0x05, 0x03, 0x01, 0x00, 0x01, 0x06, 0x13, 0x03, 0x7F,
        0x01, 0x41, 0x90, 0x29, 0x0B, 0x7F, 0x00, 0x41, 0x90, 0x09, 0x0B, 0x7F, 0x00, 0x41, 0x90,
        0x29, 0x0B, 0x07, 0x5F, 0x09, 0x06, 0x6D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x02, 0x00, 0x04,
        0x66, 0x69, 0x62, 0x32, 0x00, 0x04, 0x05, 0x74, 0x65, 0x73, 0x74, 0x31, 0x00, 0x05, 0x05,
        0x74, 0x65, 0x73, 0x74, 0x32, 0x00, 0x06, 0x05, 0x74, 0x65, 0x73, 0x74, 0x33, 0x00, 0x07,
        0x05, 0x74, 0x65, 0x73, 0x74, 0x34, 0x00, 0x08, 0x10, 0x5F, 0x5F, 0x6D, 0x61, 0x69, 0x6E,
        0x5F, 0x61, 0x72, 0x67, 0x63, 0x5F, 0x61, 0x72, 0x67, 0x76, 0x00, 0x09, 0x0A, 0x5F, 0x5F,
        0x64, 0x61, 0x74, 0x61, 0x5F, 0x65, 0x6E, 0x64, 0x03, 0x01, 0x0B, 0x5F, 0x5F, 0x68, 0x65,
        0x61, 0x70, 0x5F, 0x62, 0x61, 0x73, 0x65, 0x03, 0x02, 0x0A, 0xA5, 0x03, 0x06, 0x37, 0x01,
        0x01, 0x7F, 0x41, 0x01, 0x21, 0x01, 0x20, 0x00, 0x41, 0x02, 0x4F, 0x04, 0x7F, 0x41, 0x00,
        0x21, 0x01, 0x03, 0x40, 0x20, 0x00, 0x41, 0x02, 0x6B, 0x10, 0x04, 0x20, 0x01, 0x6A, 0x21,
        0x01, 0x20, 0x00, 0x41, 0x01, 0x6B, 0x22, 0x00, 0x41, 0x01, 0x4B, 0x0D, 0x00, 0x0B, 0x20,
        0x01, 0x41, 0x01, 0x6A, 0x05, 0x41, 0x01, 0x0B, 0x0B, 0x3F, 0x01, 0x01, 0x7F, 0x23, 0x00,
        0x41, 0x20, 0x6B, 0x22, 0x04, 0x24, 0x00, 0x20, 0x04, 0x41, 0x18, 0x6A, 0x20, 0x03, 0x39,
        0x03, 0x00, 0x20, 0x04, 0x41, 0x10, 0x6A, 0x20, 0x02, 0xBB, 0x39, 0x03, 0x00, 0x20, 0x04,
        0x20, 0x01, 0x37, 0x03, 0x08, 0x20, 0x04, 0x20, 0x00, 0x36, 0x02, 0x00, 0x41, 0xD0, 0x08,
        0x20, 0x04, 0x10, 0x00, 0x1A, 0x20, 0x04, 0x41, 0x20, 0x6A, 0x24, 0x00, 0x0B, 0x3B, 0x01,
        0x01, 0x7F, 0x23, 0x00, 0x41, 0x20, 0x6B, 0x22, 0x02, 0x24, 0x00, 0x20, 0x02, 0x20, 0x00,
        0x37, 0x03, 0x00, 0x20, 0x02, 0x20, 0x01, 0x37, 0x03, 0x08, 0x20, 0x02, 0x41, 0x10, 0x6A,
        0x20, 0x00, 0x20, 0x01, 0x7C, 0x22, 0x00, 0x37, 0x03, 0x00, 0x41, 0xF6, 0x08, 0x20, 0x02,
        0x10, 0x00, 0x1A, 0x20, 0x02, 0x41, 0x20, 0x6A, 0x24, 0x00, 0x20, 0x00, 0x0B, 0x40, 0x02,
        0x01, 0x7F, 0x01, 0x7C, 0x23, 0x00, 0x41, 0x20, 0x6B, 0x22, 0x02, 0x24, 0x00, 0x20, 0x02,
        0x20, 0x01, 0x39, 0x03, 0x08, 0x20, 0x02, 0x20, 0x00, 0xBB, 0x22, 0x03, 0x39, 0x03, 0x00,
        0x20, 0x02, 0x41, 0x10, 0x6A, 0x20, 0x03, 0x20, 0x01, 0xA2, 0x22, 0x01, 0x39, 0x03, 0x00,
        0x41, 0xB4, 0x08, 0x20, 0x02, 0x10, 0x00, 0x1A, 0x20, 0x02, 0x41, 0x20, 0x6A, 0x24, 0x00,
        0x20, 0x01, 0x0B, 0x3D, 0x01, 0x01, 0x7F, 0x23, 0x00, 0x41, 0x20, 0x6B, 0x22, 0x02, 0x24,
        0x00, 0x20, 0x02, 0x20, 0x00, 0x39, 0x03, 0x00, 0x20, 0x02, 0x20, 0x01, 0x36, 0x02, 0x08,
        0x20, 0x02, 0x41, 0x10, 0x6A, 0x20, 0x00, 0x20, 0x01, 0xB7, 0xA3, 0x22, 0x00, 0x39, 0x03,
        0x00, 0x41, 0xC2, 0x08, 0x20, 0x02, 0x10, 0x00, 0x1A, 0x20, 0x02, 0x41, 0x20, 0x6A, 0x24,
        0x00, 0x20, 0x00, 0xB6, 0x0B, 0x70, 0x00, 0x23, 0x00, 0x41, 0x20, 0x6B, 0x22, 0x00, 0x24,
        0x00, 0x41, 0x9A, 0x08, 0x10, 0x01, 0x1A, 0x02, 0x7F, 0x41, 0x80, 0x08, 0x10, 0x02, 0x22,
        0x01, 0x45, 0x04, 0x40, 0x41, 0x88, 0x08, 0x10, 0x01, 0x1A, 0x41, 0x7F, 0x0C, 0x01, 0x0B,
        0x20, 0x00, 0x20, 0x01, 0x36, 0x02, 0x10, 0x41, 0xA7, 0x08, 0x20, 0x00, 0x41, 0x10, 0x6A,
        0x10, 0x00, 0x1A, 0x20, 0x01, 0x41, 0x04, 0x6A, 0x41, 0x8E, 0x09, 0x2F, 0x00, 0x00, 0x3B,
        0x00, 0x00, 0x20, 0x01, 0x41, 0x8A, 0x09, 0x28, 0x00, 0x00, 0x36, 0x00, 0x00, 0x20, 0x00,
        0x20, 0x01, 0x36, 0x02, 0x00, 0x41, 0x80, 0x08, 0x20, 0x00, 0x10, 0x00, 0x1A, 0x20, 0x01,
        0x10, 0x03, 0x41, 0x00, 0x0B, 0x20, 0x00, 0x41, 0x20, 0x6A, 0x24, 0x00, 0x0B, 0x0B, 0x97,
        0x01, 0x01, 0x00, 0x41, 0x80, 0x08, 0x0B, 0x8F, 0x01, 0x62, 0x75, 0x66, 0x3A, 0x20, 0x25,
        0x73, 0x00, 0x6D, 0x61, 0x6C, 0x6C, 0x6F, 0x63, 0x20, 0x62, 0x75, 0x66, 0x20, 0x66, 0x61,
        0x69, 0x6C, 0x65, 0x64, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x20, 0x77, 0x6F, 0x72, 0x6C,
        0x64, 0x21, 0x00, 0x62, 0x75, 0x66, 0x20, 0x70, 0x74, 0x72, 0x3A, 0x20, 0x25, 0x70, 0x0A,
        0x00, 0x25, 0x66, 0x20, 0x2A, 0x20, 0x25, 0x66, 0x20, 0x3D, 0x20, 0x25, 0x66, 0x0A, 0x00,
        0x25, 0x66, 0x20, 0x2F, 0x20, 0x25, 0x64, 0x20, 0x3D, 0x20, 0x25, 0x66, 0x0A, 0x00, 0x69,
        0x33, 0x32, 0x3A, 0x20, 0x25, 0x64, 0x2C, 0x20, 0x69, 0x36, 0x34, 0x3A, 0x20, 0x25, 0x6C,
        0x6C, 0x64, 0x2C, 0x20, 0x66, 0x33, 0x32, 0x3A, 0x20, 0x25, 0x66, 0x2C, 0x20, 0x66, 0x36,
        0x34, 0x3A, 0x20, 0x25, 0x66, 0x0A, 0x00, 0x25, 0x6C, 0x6C, 0x64, 0x20, 0x2B, 0x20, 0x25,
        0x6C, 0x6C, 0x64, 0x20, 0x3D, 0x20, 0x25, 0x6C, 0x6C, 0x64, 0x0A, 0x00, 0x31, 0x32, 0x33,
        0x34, 0x0A,
    ];

    let payload_ptr = payload.clone().as_mut_ptr();

    let mut error_buf = [0i8; DEFAULT_ERROR_BUF_SIZE];

    let ret = unsafe { wasm_runtime_init() };
    assert!(ret);

    let module = unsafe {
        wasm_runtime_load(
            payload_ptr,
            payload.len() as u32,
            error_buf.as_mut_ptr(),
            error_buf.len() as u32,
        )
    };

    assert!((module as usize) != 0);

    unsafe {
        wasm_runtime_set_wasi_args(
            module,
            std::ptr::null_mut(),
            0,
            std::ptr::null_mut(),
            0,
            std::ptr::null_mut(),
            0,
            std::ptr::null_mut(),
            0,
        );
    }

    let module_instance = unsafe {
        wasm_runtime_instantiate(
            module,
            DEFAULT_STACK_SIZE,
            DEFAULT_HEAP_SIZE,
            error_buf.as_mut_ptr(),
            error_buf.len() as u32,
        )
    };

    //let err_u8_vec: Vec<u8> = error_buf.iter().map(|&x| x as u8).filter(|x| *x > 31 && *x < 124).collect();
    //print!("error {:?}", String::from_utf8(err_u8_vec));

    assert!((module_instance as usize) != 0);

    let success =
        unsafe { wasm_application_execute_main(module_instance, 0, std::ptr::null_mut()) };

    assert!(success);

    let _main_result = unsafe { wasm_runtime_get_wasi_exit_code(module_instance) };

    unsafe {
        wasm_runtime_deinstantiate(module_instance);
        wasm_runtime_unload(module);
        wasm_runtime_destroy();
    };
}
