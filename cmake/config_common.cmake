if (NOT ("$ENV{VALGRIND}" STREQUAL "YES"))
  add_definitions(-DNVALGRIND)
endif ()

string(TOUPPER ${BUILD_TARGET} BUILD_TARGET)

# Add definitions for the build target
if (BUILD_TARGET STREQUAL "X86_64")
  add_definitions(-DBUILD_TARGET_X86_64)
elseif (BUILD_TARGET STREQUAL "AMD_64")
  add_definitions(-DBUILD_TARGET_AMD_64)
elseif (BUILD_TARGET STREQUAL "X86_32")
  add_definitions(-DBUILD_TARGET_X86_32)
elseif (BUILD_TARGET MATCHES "ARM.*")
  add_definitions(-DBUILD_TARGET_ARM)
  add_definitions(-DBUILD_TARGET="${BUILD_TARGET}")
elseif (BUILD_TARGET MATCHES "THUMB.*")
  add_definitions(-DBUILD_TARGET_THUMB)
  add_definitions(-DBUILD_TARGET="${BUILD_TARGET}")
elseif (BUILD_TARGET STREQUAL "MIPS")
  add_definitions(-DBUILD_TARGET_MIPS)
elseif (BUILD_TARGET STREQUAL "XTENSA")
  add_definitions(-DBUILD_TARGET_XTENSA)
else ()
  message (FATAL_ERROR "-- Build target isn't set")
endif ()

if (CMAKE_SIZEOF_VOID_P EQUAL 8)
  if (BUILD_TARGET STREQUAL "X86_64" OR BUILD_TARGET STREQUAL "AMD_64")
    # Add -fPIC flag if build as 64-bit
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
    set (CMAKE_SHARED_LIBRARY_LINK_C_FLAGS "${CMAKE_SHARED_LIBRARY_LINK_C_FLAGS} -fPIC")
  else ()
    add_definitions (-m32)
    set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m32")
    set (CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -m32")
  endif ()
endif ()

if (WASM_ENABLE_WASI EQUAL 1)
  add_definitions(-DWASM_ENABLE_WASI=1)
endif ()

if (WASM_ENABLE_INTERP EQUAL 1)
  add_definitions(-DWASM_ENABLE_INTERP=1)
endif ()

if (WASM_ENABLE_AOT EQUAL 1)
  add_definitions(-DWASM_ENABLE_AOT=1)
endif ()

if (NOT WASM_ENABLE_INTERP EQUAL 1)
if (NOT WASM_ENABLE_AOT EQUAL 1)
  message (FATAL_ERROR "-- WASM Interpreter and AOT must be enabled at least one")
endif ()
endif ()

if (WASM_ENABLE_JIT EQUAL 1)
  if (WASM_ENABLE_AOT EQUAL 1)
    add_definitions("-DWASM_ENABLE_JIT=1")
    set (LLVM_SRC_ROOT "${PROJECT_SOURCE_DIR}/../../lib/3rdparty/llvm")
    if (NOT EXISTS "${LLVM_SRC_ROOT}/build")
      message (FATAL_ERROR "Cannot find LLVM dir: ${LLVM_SRC_ROOT}/build")
    endif ()
    set (CMAKE_PREFIX_PATH "${LLVM_SRC_ROOT}/build;${CMAKE_PREFIX_PATH}")
    find_package(LLVM REQUIRED CONFIG)
    include_directories(${LLVM_INCLUDE_DIRS})
    add_definitions(${LLVM_DEFINITIONS})
    message(STATUS "Found LLVM ${LLVM_PACKAGE_VERSION}")
    message(STATUS "Using LLVMConfig.cmake in: ${LLVM_DIR}")
  else ()
    set (WASM_ENABLE_JIT 0)
    message ("-- WASM JIT disabled due to WASM AOT is disabled")
 endif ()
else ()
  unset (LLVM_AVAILABLE_LIBS)
endif ()

message ("-- Build Configurations:")
message ("     Build as target ${BUILD_TARGET}")
message ("     CMAKE_BUILD_TYPE " ${CMAKE_BUILD_TYPE})
if (WASM_ENABLE_INTERP EQUAL 1)
  message ("     WASM Interpreter enabled")
else ()
  message ("     WASM Interpreter disbled")
endif ()
if (WASM_ENABLE_AOT EQUAL 1)
  message ("     WASM AOT enabled")
else ()
  message ("     WASM AOT disbled")
endif ()
if (WASM_ENABLE_JIT EQUAL 1)
  message ("     WASM JIT enabled")
else ()
  message ("     WASM JIT disbled")
endif ()
if (WASM_ENABLE_WASI EQUAL 1)
  message ("     WASI enabled")
else ()
  message ("     WASI disbled")
endif ()

