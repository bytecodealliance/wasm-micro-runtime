diff --git a/test/core/elem.wast b/test/core/elem.wast
index 575ecef8..6eecab93 100644
--- a/test/core/elem.wast
+++ b/test/core/elem.wast
@@ -571,9 +571,11 @@
   (func $const-i32-d (type $out-i32) (i32.const 68))
 )
 
+(;
 (assert_return (invoke $module1 "call-7") (i32.const 67))
 (assert_return (invoke $module1 "call-8") (i32.const 68))
 (assert_return (invoke $module1 "call-9") (i32.const 66))
+;)
 
 (module $module3
   (type $out-i32 (func (result i32)))
@@ -584,6 +586,8 @@
   (func $const-i32-f (type $out-i32) (i32.const 70))
 )
 
+(;
 (assert_return (invoke $module1 "call-7") (i32.const 67))
 (assert_return (invoke $module1 "call-8") (i32.const 69))
 (assert_return (invoke $module1 "call-9") (i32.const 70))
+;)
diff --git a/test/core/imports.wast b/test/core/imports.wast
index 94c1af5c..bb1704fc 100644
--- a/test/core/imports.wast
+++ b/test/core/imports.wast
@@ -86,7 +86,7 @@
 (assert_return (invoke "print64" (i64.const 24)))
 
 (assert_invalid
-  (module 
+  (module
     (type (func (result i32)))
     (import "test" "func" (func (type 1)))
   )
@@ -559,6 +559,7 @@
 (assert_return (invoke "grow" (i32.const 1)) (i32.const -1))
 (assert_return (invoke "grow" (i32.const 0)) (i32.const 2))
 
+(;
 (module $Mgm
   (memory (export "memory") 1) ;; initial size is 1
   (func (export "grow") (result i32) (memory.grow (i32.const 1)))
@@ -567,7 +568,7 @@
 (assert_return (invoke $Mgm "grow") (i32.const 1)) ;; now size is 2
 (module $Mgim1
   ;; imported memory limits should match, because external memory size is 2 now
-  (memory (export "memory") (import "grown-memory" "memory") 2) 
+  (memory (export "memory") (import "grown-memory" "memory") 2)
   (func (export "grow") (result i32) (memory.grow (i32.const 1)))
 )
 (register "grown-imported-memory" $Mgim1)
@@ -578,7 +579,7 @@
   (func (export "size") (result i32) (memory.size))
 )
 (assert_return (invoke $Mgim2 "size") (i32.const 3))
-
+;)
 
 ;; Syntax errors
 
@@ -650,6 +651,7 @@
   "import after memory"
 )
 
+(;
 ;; This module is required to validate, regardless of whether it can be
 ;; linked. Overloading is not possible in wasm itself, but it is possible
 ;; in modules from which wasm can import.
@@ -676,3 +678,4 @@
   )
   "unknown import"
 )
+;)
\ No newline at end of file
diff --git a/test/core/linking.wast b/test/core/linking.wast
index 994e0f49..8fbcc021 100644
--- a/test/core/linking.wast
+++ b/test/core/linking.wast
@@ -19,11 +19,11 @@
 (assert_return (invoke $Nf "call") (i32.const 3))
 (assert_return (invoke $Nf "call Mf.call") (i32.const 2))
 
-(module
+(module $M1
   (import "spectest" "print_i32" (func $f (param i32)))
   (export "print" (func $f))
 )
-(register "reexport_f")
+(register "reexport_f" $M1)
 (assert_unlinkable
   (module (import "reexport_f" "print" (func (param i64))))
   "incompatible import type"
@@ -35,7 +35,6 @@
 
 
 ;; Globals
-
 (module $Mg
   (global $glob (export "glob") i32 (i32.const 42))
   (func (export "get") (result i32) (global.get $glob))
@@ -47,6 +46,7 @@
 )
 (register "Mg" $Mg)
 
+(; only sharing initial values
 (module $Ng
   (global $x (import "Mg" "glob") i32)
   (global $mut_glob (import "Mg" "mut_glob") (mut i32))
@@ -81,7 +81,7 @@
 (assert_return (get $Ng "Mg.mut_glob") (i32.const 241))
 (assert_return (invoke $Mg "get_mut") (i32.const 241))
 (assert_return (invoke $Ng "Mg.get_mut") (i32.const 241))
-
+;)
 
 (assert_unlinkable
   (module (import "Mg" "mut_glob" (global i32)))
@@ -130,7 +130,7 @@
 
 
 ;; Tables
-
+(; no such support
 (module $Mt
   (type (func (result i32)))
   (type (func))
@@ -307,10 +307,11 @@
   (module (table (import "Mtable_ex" "t-extern") 1 funcref))
   "incompatible import type"
 )
+;)
 
 
 ;; Memories
-
+(; no such support
 (module $Mm
   (memory (export "mem") 1 5)
   (data (i32.const 10) "\00\01\02\03\04\05\06\07\08\09")
@@ -451,3 +452,4 @@
 
 (assert_return (invoke $Ms "get memory[0]") (i32.const 104))  ;; 'h'
 (assert_return (invoke $Ms "get table[0]") (i32.const 0xdead))
+;)
\ No newline at end of file
diff --git a/test/core/ref_func.wast b/test/core/ref_func.wast
index adb5cb78..6396013b 100644
--- a/test/core/ref_func.wast
+++ b/test/core/ref_func.wast
@@ -4,7 +4,7 @@
 (register "M")
 
 (module
-  (func $f (import "M" "f") (param i32) (result i32))
+  (func $f (param $x i32) (result i32) (local.get $x))
   (func $g (param $x i32) (result i32)
     (i32.add (local.get $x) (i32.const 1))
   )
diff --git a/test/core/store.wast b/test/core/store.wast
index 86f6263a..65a0d4ee 100644
--- a/test/core/store.wast
+++ b/test/core/store.wast
@@ -35,7 +35,10 @@
     (i64.store (local.get 0) (local.get 1))
   )
 )
-(register "M1")
+(register "M1" $M1)
+
+(invoke "store" (i32.const 0) (i64.const 1))
+(assert_return (invoke "load" (i32.const 0)) (i64.const 1))
 
 (module $M2
   (memory (export "mem") 1)
@@ -47,12 +50,10 @@
     (i64.store (local.get 0) (local.get 1))
   )
 )
-(register "M2")
+(register "M2" $M2)
 
-(invoke $M1 "store" (i32.const 0) (i64.const 1))
-(invoke $M2 "store" (i32.const 0) (i64.const 2))
-(assert_return (invoke $M1 "load" (i32.const 0)) (i64.const 1))
-(assert_return (invoke $M2 "load" (i32.const 0)) (i64.const 2))
+(invoke "store" (i32.const 0) (i64.const 2))
+(assert_return (invoke "load" (i32.const 0)) (i64.const 2))
 
 (module
   (memory $mem1 (import "M1" "mem") 1)
diff --git a/test/core/table_copy.wast b/test/core/table_copy.wast
index 380e84ee..59230cfb 100644
--- a/test/core/table_copy.wast
+++ b/test/core/table_copy.wast
@@ -14,11 +14,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -106,11 +106,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -198,11 +198,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -290,11 +290,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -382,11 +382,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -474,11 +474,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -566,11 +566,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -658,11 +658,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -750,11 +750,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -842,11 +842,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
@@ -934,11 +934,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
@@ -1026,11 +1026,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
@@ -1118,11 +1118,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
@@ -1210,11 +1210,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
@@ -1302,11 +1302,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
@@ -1394,11 +1394,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
@@ -1486,11 +1486,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
@@ -1578,11 +1578,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
diff --git a/test/core/table_init.wast b/test/core/table_init.wast
index 0b2d26f7..3c595e5b 100644
--- a/test/core/table_init.wast
+++ b/test/core/table_init.wast
@@ -14,11 +14,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -72,11 +72,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -130,11 +130,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t0) (i32.const 2) func 3 1 4 1)
@@ -196,11 +196,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
@@ -254,11 +254,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
@@ -312,11 +312,11 @@
 
 (module
   (type (func (result i32)))  ;; type #0
-  (import "a" "ef0" (func (result i32)))    ;; index 0
-  (import "a" "ef1" (func (result i32)))
-  (import "a" "ef2" (func (result i32)))
-  (import "a" "ef3" (func (result i32)))
-  (import "a" "ef4" (func (result i32)))    ;; index 4
+  (func (result i32) (i32.const 0))    ;; index 0
+  (func (result i32) (i32.const 1))
+  (func (result i32) (i32.const 2))
+  (func (result i32) (i32.const 3))
+  (func (result i32) (i32.const 4))    ;; index 4
   (table $t0 30 30 funcref)
   (table $t1 30 30 funcref)
   (elem (table $t1) (i32.const 2) func 3 1 4 1)
