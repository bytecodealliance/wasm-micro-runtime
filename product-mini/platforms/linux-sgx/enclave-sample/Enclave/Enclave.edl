/*
 * Copyright (C) 2019 Intel Corporation.  All rights reserved.
 * SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
 */

#define WASM_ENABLE_SGX_IPFS 0
#define WASM_ENABLE_LIB_RATS 0

enclave {
    from "sgx_tstdc.edl" import *;
    from "sgx_pthread.edl" import *;
    from "sgx_wamr.edl" import *;
#if WASM_ENABLE_LIB_RATS != 0
    from "rats.edl" import *;
    from "sgx_tsgxssl.edl" import *;
#endif
#if WASM_ENABLE_SGX_IPFS != 0
    from "sgx_tprotected_fs.edl" import *;
#endif

    trusted {
        /* define ECALLs here. */
      public bool ecall_handle_cmd_init_runtime(uint32_t max_thread_num);
      public void ecall_handle_cmd_destroy_runtime();
      public bool ecall_handle_cmd_load_module(
        [in, size=wasm_file_size] char *wasm_file,
        uint32_t wasm_file_size,
        [out, size=error_buf_size] char *error_buf,
        uint32_t error_buf_size,
        [out] uint16_t *enclave_module_idx
      );
      public bool ecall_handle_cmd_unload_module(uint16_t enclave_module_idx);
      public bool ecall_handle_cmd_instantiate_module(
        uint16_t enclave_module_idx,
        uint32_t stack_size,
        uint32_t heap_size,
        [out, size=error_buf_size] char *error_buf,
        uint32_t error_buf_size,
        [out] uint16_t *module_inst_idx
      );
      public bool ecall_handle_cmd_deinstantiate_module(uint16_t wasm_module_inst_idx);
      public bool ecall_handle_cmd_get_exception(
        uint16_t wasm_module_inst_idx,
        [out, size=exception_size] char *exception,
        uint32_t exception_size
      );
      public bool ecall_handle_cmd_exec_app_main(
        uint16_t wasm_module_inst_idx,
        [in, count=app_argc] char **u_app_argv,
        uint32_t app_argc
      );
      public bool ecall_handle_cmd_exec_app_func(
        uint16_t wasm_module_inst_idx,
        [in, string] const char *func_name,
        [in, count=app_argc] char **u_app_argv,
        uint32_t app_argc
      );
      public void ecall_handle_cmd_set_log_level(int log_level);
      public bool ecall_handle_cmd_set_wasi_args(
        uint16_t enclave_module_idx,
        [in, count=dir_list_size] const char **dir_list,
        uint32_t dir_list_size,
        [in, count=env_list_size] const char **env_list,
        uint32_t env_list_size,
        int stdinfd,
        int stdoutfd,
        int stderrfd,
        [in, count=wasi_argc] char **wasi_argv,
        uint32_t wasi_argc,
        [in, count=addr_pool_list_size] const char **addr_pool_list,
        uint32_t addr_pool_list_size
      );
      public void ecall_handle_cmd_get_version(
        [out] uint32_t *major,
        [out] uint32_t *minor,
        [out] uint32_t *patch
      );
      public uint32_t ecall_handle_cmd_get_pgo_prof_buf_size(uint16_t wasm_module_inst_idx);
      public uint32_t ecall_handle_cmd_get_pgo_prof_buf_data(
        uint16_t wasm_module_inst_idx,
        [out, size=len] char *buf,
        uint32_t len
      );
      public void ecall_iwasm_main(
        [in, size=wasm_file_size] uint8_t *wasm_file_buf,
        uint32_t wasm_file_size
      );
    };

    untrusted {
        /* define OCALLs here. */
        int ocall_print([in, string]const char* str);
    };
};
